<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_platform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
tiledepth = power(10,6);
tilesize = 8;
genlevel = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Tiles
alarm[0] = 1;
//for( ydraw = 0; ydraw &lt; image_yscale; ydraw++){
//    for( xdraw = 0; xdraw &lt; image_xscale; xdraw++){
//        if(ydraw = 0){
//        // draw the top of the platform
//            if( xdraw = 0){
//                tile_add(bg_tileset, 0, 0, tilesize, tilesize, x, y - tilesize, tiledepth);
//                tile_add(bg_tileset, 0, 8, tilesize, tilesize, x, y, tiledepth);
//            } else if( xdraw = image_xscale - 1){
//                tile_add(bg_tileset, 16, 0, tilesize, tilesize, x + xdraw * tilesize, y - tilesize, tiledepth);
//                tile_add(bg_tileset, 16, 8, tilesize, tilesize, x + xdraw * tilesize, y, tiledepth);
//                
//            } else {
//                tile_add(bg_tileset, 8, 0, tilesize, tilesize, x + xdraw * tilesize, y - tilesize, tiledepth);
//                tile_add(bg_tileset, 8, 8, tilesize, tilesize, x + xdraw * tilesize, y, tiledepth);               
//            } 
//        
//        } else {
//        // draw the base of the platform
//            if( xdraw = 0){
//                tile_add(bg_tileset, 0, 16, tilesize, tilesize, x + xdraw * tilesize, y + ydraw * tilesize, tiledepth);
//            } else if( xdraw = image_xscale - 1){
//                tile_add(bg_tileset, 16, 16, tilesize, tilesize, x + xdraw * tilesize, y + ydraw * tilesize, tiledepth);
//            } else {
//                tile_add(bg_tileset, 8, 16, tilesize, tilesize, x + xdraw * tilesize, y + ydraw * tilesize, tiledepth);
//            }
//            
//        }    
//    }
//} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Tiles

for( ydraw = 0; ydraw &lt; image_yscale; ydraw++){
    for( xdraw = 0; xdraw &lt; image_xscale; xdraw++){
        if(ydraw = 0){
        // draw the top of the platform
            if( xdraw = 0){
                tile_add(bg_tileset, 0, 0, tilesize, tilesize, x, y - tilesize, tiledepth);
                tile_add(bg_tileset, 0, 8, tilesize, tilesize, x, y, tiledepth);
            } else if( xdraw = image_xscale - 1){
                tile_add(bg_tileset, 16, 0, tilesize, tilesize, x + xdraw * tilesize, y - tilesize, tiledepth);
                tile_add(bg_tileset, 16, 8, tilesize, tilesize, x + xdraw * tilesize, y, tiledepth);
                
            } else {
                tile_add(bg_tileset, 8, 0, tilesize, tilesize, x + xdraw * tilesize, y - tilesize, tiledepth);
                tile_add(bg_tileset, 8, 8, tilesize, tilesize, x + xdraw * tilesize, y, tiledepth);               
            } 
        
        } else {
        // draw the base of the platform
            if( xdraw = 0){
                tile_add(bg_tileset, 0, 16, tilesize, tilesize, x + xdraw * tilesize, y + ydraw * tilesize, tiledepth);
            } else if( xdraw = image_xscale - 1){
                tile_add(bg_tileset, 16, 16, tilesize, tilesize, x + xdraw * tilesize, y + ydraw * tilesize, tiledepth);
            } else {
                tile_add(bg_tileset, 8, 16, tilesize, tilesize, x + xdraw * tilesize, y + ydraw * tilesize, tiledepth);
            }
            
        }    
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// self destruct
show_debug_message(instance_number(obj_platform_autogen_init));
if(x + image_xscale * tilesize &lt; view_xview[0]){
    show_debug_message("Destroyed!");
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create next platform
//show_debug_message((view_xview[0] + view_wview[0]));
//show_debug_message(x);
if(genlevel = 0 &amp;&amp; x &lt; (view_xview[0] + view_wview[0])){
    rightx = x + image_xscale * tilesize;
    
    // new platform position
    newy = (irandom(7) + 8) * tilesize;
    newx = rightx + ((irandom(5) + 3) * tilesize);
    
    // new platform scale size!
    scaley = 18 - (newy / tilesize);
    scalex = irandom(27) + 5;
    
    temp_platform = instance_create( newx, newy, obj_platform_autogen_init);
    temp_platform.image_xscale = scalex;
    temp_platform.image_yscale = scaley;
    
    show_debug_message("Created!");
    genlevel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
